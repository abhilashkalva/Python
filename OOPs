An object-oriented paradigm is to design the program using classes and objects. The object is related to real-word entities such as book, house, pencil, etc. 
The oops concept focuses on writing the reusable code. It is a widespread technique to solve the problem by creating objects.

Class
Object
Method
Inheritance
Polymorphism
Data Abstraction
Encapsulation

Class
The class can be defined as a collection of objects. It is a logical entity that has some specific attributes and methods. 
For example: if you have an employee class, then it should contain an attribute and method, i.e. an email id, name, age, salary,

Object
The object is an entity that has state and behavior. It may be any real-world object like the mouse, keyboard, chair, table, pen, etc.

class car:  
    def __init__(self,modelname, year):  
        self.modelname = modelname  
        self.year = year  
    def display(self):  
        print(self.modelname,self.year)  
  
c1 = car("Toyota", 2016)  
c1.display()  

Method
The method is a function that is associated with an object. In Python, a method is not unique to class instances. Any object type can have methods.

Inheritance
It specifies that the child object acquires all the properties and behaviors of the parent object.
By using inheritance, we can create a class which uses all the properties and behavior of another class. 
The new class is known as a derived class or child class, and the one whose properties are acquired is known as a base class or parent class.

types:
Single Inheritance. Multiple Inheritance. Multilevel Inheritance. Hierarchical Inheritance. Hybrid Inheritance.

In multiple inheritance one child class can inherit multiple parent classes.
Multilevel Inheritance
In this type of inheritance, a class can inherit from a child class/derived class.

It provides the re-usability of the code.

class Person:
  def __init__(self, fname, lname):
    self.firstname = fname
    self.lastname = lname

  def printname(self):
    print(self.firstname, self.lastname)

#Use the Person class to create an object, and then execute the printname method:

x = Person("John", "Doe")
x.printname()

class Student(Person):
  pass
  
x = Student("Mike", "Olsen")
x.printname()

Python also has a super() function that will make the child class inherit all the methods and properties from its parent:

Add a year parameter, and pass the correct year when creating objects:

class Student(Person):
  def __init__(self, fname, lname, year):
    super().__init__(fname, lname)
    self.graduationyear = year

x = Student("Mike", "Olsen", 2019)


Polymorphism
Polymorphism contains two words "poly" and "morphs". Poly means many, and morph means shape. By polymorphism, we understand that one task can be performed in different ways.
For example - you have a class animal, and all animals speak. But they speak differently. Here, the "speak" behavior is polymorphic in a sense and depends on the animal. 
So, the abstract "animal" concept does not actually "speak",  but specific animals (like dogs and cats) have a concrete implementation of the action "speak".

What is Polymorphism : The word polymorphism means having many forms. In programming, 
polymorphism means same function name (but different signatures) being uses for different types

class India():
    def capital(self):
        print("New Delhi is the capital of India.")
   
    def language(self):
        print("Hindi is the most widely spoken language of India.")
   
    def type(self):
        print("India is a developing country.")
   
class USA():
    def capital(self):
        print("Washington, D.C. is the capital of USA.")
   
    def language(self):
        print("English is the primary language of USA.")
   
    def type(self):
        print("USA is a developed country.")
  
def func(obj):
    obj.capital()
    obj.language()
    obj.type()
   
obj_ind = India()
obj_usa = USA()
   
func(obj_ind)
func(obj_usa)



Encapsulation
Encapsulation is also an essential aspect of object-oriented programming. It is used to restrict access to methods and variables. 
In encapsulation, code and data are wrapped together within a single unit from being modified by accident.


# Python program to
# demonstrate protected members
 
 
# Creating a base class
class Base:
    def __init__(self):
         
        # Protected member
        self._a = 2
 
# Creating a derived class   
class Derived(Base):
    def __init__(self):
         
        # Calling constructor of
        # Base class
        Base.__init__(self)
        print("Calling protected member of base class: ")
        print(self._a)
 
obj1 = Derived()
         
obj2 = Base()
 
# Calling protected member
# Outside class will  result in
# AttributeError
print(obj2.a)
 
 Output: 
Calling protected member of base class: 
2

Data Abstraction
Data abstraction and encapsulation both are often used as synonyms. Both are nearly synonyms because data abstraction is achieved through encapsulation.

Abstraction is used to hide internal details and show only functionalities. Abstracting something means to give names to things so that the name captures 
the core of what a function or a whole program does.

